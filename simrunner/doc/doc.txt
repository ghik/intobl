= Skrypt automatyzujący masowe uruchamianie symulacji
Roman Janusz <roman@student.agh.edu.pl>, Adam Chrabąszcz <admchr@student.agh.edu.pl>

== Informacje ogólne ==

Skrypt do masowego uruchamiania symulacji został zaimplementowany w celu zautomatyzowania uruchamiania
i generowania raportów symulacji przy użyciu platform takich jak np. jAgE. Jest to projekt w Pythonie,
zaimplementowany przy użyciu środowiska Eclipse PyDev.

== Podstawowa dokumentacja użytkownika ==

=== Uruchamianie ===

Skryptem startowym projektu jest plik +runsim+ z katalogu +simrunner/+:

----
./runsim [--overwrite] configFile datasetName
----

Parametry:

 * +configFile+ - plik konfiguracyjny - definiuje w jaki sposób wykonywać symulacje, dla jakich parametrów i na jakiej platformie.
   Jest to specjalna klasa w Pythonie (opisana dalej)
 * +datasetName+ - nazwa katalogu, do którego zostaną zapisane wyniki symulacji (wewnątrz katalogu nadrzędnego +datasets+)

Opcje:

 * +--overwrite+ - jeśli zbiór +datasetName+ już istnieje, to zastąp go nowym

Po wykonaniu symulacji wyniki można znaleźć w katalogu +datasets/_datasetName_+ (raport HTML w pliku +index.html+).

=== Plik konfiguracyjny ===

Plik konfiguracyjny definiuje:

 * Platformę, która ma zostać użyta do symulacji poprzez wskazanie modułu pythona, w którym zaimplementowany jest sterownik danej platformy
 * Specyficzne parametry dla sterownika platformy
 * Podstawowe parametry uruchamiania (np. liczba uruchomień dla takiego samego zestawu parametrów)
 * Stałe parametry symulacji wraz z wartościami
 * Zmienne parametry symulacji wraz z listą wartości dla każdego z nich
 * Ilość uruchomień symulacji dla każdej konfiguracji parametrów


Plik konfiguracyjny jest specjalną klasą w Pythonie. Przykładowy plik konfiguracyjny dla zmodyfikowanej aplikacji EMAS na platformie jAgE:

----
class Configuration:
    driver = 'simrunner.jageplatform'
    
    execpath = '../jage/algorithms/applications/emas-app'
    agexml = "classpath:age.xml"
    dotreplacer = '_'
    
    repeats = 3
    
    constantParameters = ['outfile', 'steps', 'problem_size', 'islands_number', 'individual_chanceToMigrate']
    
    outfile = 'results.csv'
    steps = 1000
    problem_size = 10
    islands_number = 5
    individual_chanceToMigrate = 0.001
    
    changingParameters = ['islands_size', 'feature_chanceToMutate', 'feature_mutationRange']
    
    islands_size = [5, 10, 50]
    feature_chanceToMutate = [0.2, 0.4, 0.6, 0.8]
    feature_mutationRange = [0.0125, 0.025, 0.05, 0.1]

----

W powyższym pliku:

 * +driver+ definiuje moduł, w którym zaimplementowany jest sterownik platformy
 * +execpath+, +agexml+, +dotreplacer+ to specyficzne parametry platformy, interpretowane przez sterownik
 * +repeats+ definiuje liczbę uruchomień symulatora dla pojedynczego zestawu parametrów
 * +constantParameters+ definiuje listę nazw stałych parametrów symulacji. Dla każdego z nich konkretna wartość jest podana dalej w pliku konfiguracyjnym.
 * +changingParameters+ definiuje listę nazw zmieniających się parametrów symulacji. Dla każdego z nich lista możliwych wartości podana jest dalej w pliku konfiguracyjnym.

Symulacja zostanie uruchomiona dla każdej możliwej kombinacji wartości zmieniających się parametrów. Dla konkretnego zestawu wartości zostanie ona uruchomiona +repeats+ razy.

== Dostępne sterowniki platformy ==

=== simrunner.jageplatform ===

Platforma jAgE jest środowiskiem projektowania i uruchamiania ewolucyjnych symulacji wieloagentowych zapimplementowanym w języku Java. Do poprawnego działania wymagana jest wersja platformy z zaimplementowanym modułem agregacji danych (dołączona do kodu projektu). Przed pierwszym uruchomieniem platformy należy ją skompilować, uruchamiając w katalogu +jage/+ komendę +mvn install+. Przykładowa konfiguracja, włączająca parametry niezbędne do poprawnego uruchomienia znajduje się w pliku +simrunner/JageConfiguration.py+.

=== simrunner.pythonplatform ===

Platforma pythonowa symuluje dynamikę populacyjną w oparciu o model spotkaniowy. Do poprawnego działania wymagana jest wersja platformy z zaimplementowanym modułem agregacji danych (dołączona do kodu projektu). Przykładowa konfiguracja, włączająca parametry niezbędne do poprawnego uruchomienia znajduje się w pliku +simrunner/Configuration.py+.

== Dokumentacja deweloperska ==

=== Dodawanie nowych platform uruchomieniowych ===

Obsługa platform jest realizowana za pomocą klas pythonowych. Jeśli w konfiguracji znajduje się linia:

----
    driver = 'simrunner.jageplatform'
----

oznacza to, że za obsługę platformy jest odpowiedzialna klasa o nazwie +Driver+ znajdująca się w module +simrunner.jageplatform+. Aby dodać sterownik innej platformy symulacyjnej, należy stworzyć moduł pythonowy, w którym ma znajdować się klasa zgodna z interfejsem:

----

class Driver:
    def __init__(self, global_configuration):
        ...
    def setup(self):
        ...
    def prepare_parameters(self, changingParams):
        ...
    def run(self, datadir, changingParams):
        ...
----
Protokół użytkowania sterownika wygląda następująco:

 * W momencie konstrukcji sterownik dostaje referencję do klasy będącej konfiguracją w parametrze +global_configuration+. 
 * Metoda +setup+ jest wywoływana jednokrotnie przed uruchomieniem zbioru symulacji i może być użyta do przygotowania środowiska. 
 * Metody +prepare_parameters+ i +run+ wywoływane są wielkorotnie, dla każdej wartości wektora parametrów zmiennych.
 * Metoda +prepare_parameters+ jest wołana przed wykonaniem metody +run+. W parametrze +changingParams+ znajduje się lista parametrów zmieniających się, w formacie +[(nazwa1, wartość1), (nazwa2, wartość2), ...]+. Metoda ma za zadanie przygotować konfigurację środowiska dla danych parametrów.
 * Metoda +run+ uruchamia symulację ilość razy zapisaną w +global_configuration.repeats+. W parametrze +datadir+ znajduje się ścieżka, do której mają być zapisywane pliki wyjściowe symulacji. Pliki wyjściowe z poszczególnych uruchomień mają mieć nazwy +result0.csv, result1.csv, ...+ i mają zawierać: w pierwszj kolumnie numer iteracji (zaczynając od 0), w drugiej wartość fitness. Kolumny mają być oddzielone przecinkami.

=== Poglądowe diagramy ===

image::classes.png[]

image::sequence.png[]


